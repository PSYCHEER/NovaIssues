name: Assign Issues to Project Board

on:
  issues:
    types: [opened, labeled, unlabeled, edited]
  issue_comment:
    types: [created, edited]

jobs:
  assign-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Assign issue to project board
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            const projectId = '4'; // Replace with your project ID
            const columnMapping = {
              'bug': 'Issue',
              'addon': 'Suggestions',
              'enhancement': 'Suggestions'
            };

            const status = labels.map(label => columnMapping[label]).find(status => status);

            if (!status) {
              console.log('No matching label found for the issue.');
              return;
            }

            const { data: fields } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `, {
              projectId: projectId
            });

            const statusField = fields.nodes.find(field => field.name === 'Status');

            if (!statusField) {
              console.log('Status field not found.');
              return;
            }

            const { data: items } = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                            url
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, {
              projectId: projectId
            });

            const item = items.nodes.find(item => item.content.url === issue.url);

            if (!item) {
              console.log('Issue not found in the project.');
              return;
            }

            await github.graphql(`
              mutation($itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}",
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $value
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              itemId: item.id,
              fieldId: statusField.id,
              value: status
            });

            console.log(`Moved issue #${issue.number} to ${status} column.`);