name: Assign Issue to Project Status

on:
  issues:
    types: [opened, labeled, edited]
  issue_comment:
    types: [created, edited]

jobs:
  assign-status:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Assign issue to project status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const projectId = 'PVT_kwHOAo7FNc4AzGK0';
            const issueNumber = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const labels = context.payload.issue.labels.map(label => label.name);
            let status = '';

            if (labels.includes('bug')) {
              status = 'Issue';
            } else if (labels.includes('enhancement')) {
              status = 'Suggestion';
            } else if (labels.includes('addon')) {
              status = 'Suggestion';
            }

            if (status) {
              const projectQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      id
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const projectData = await github.graphql(projectQuery, {
                projectId: projectId
              });

              const columnsQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      id
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;

              const columnsData = await github.graphql(columnsQuery, {
                projectId: projectId
              });

              const column = columnsData.node.items.nodes.find(col => col.name === status);

              if (column) {
                await github.projects.createCard({
                  column_id: column.id,
                  content_id: context.payload.issue.id,
                  content_type: 'Issue'
                });
              }
            }