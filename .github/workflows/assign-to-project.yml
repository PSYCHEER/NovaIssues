name: Assign Issues to Project

on:
  issues:
    types: [opened, edited]

jobs:
  assign_to_project:
    runs-on: ubuntu-latest

    steps:
    - name: Check issue labels
      id: check_labels
      uses: actions/github-script@v6
      with:
        script: |
          const labels = context.payload.issue.labels.map(label => label.name.toLowerCase());
          const hasAddon = labels.includes('addon');
          const hasEnhancement = labels.includes('enhancement');
          console.log(`Labels: ${labels}`);
          console.log(`Has Addon: ${hasAddon}`);
          console.log(`Has Enhancement: ${hasEnhancement}`);
          core.setOutput("hasAddon", hasAddon);
          core.setOutput("hasEnhancement", hasEnhancement);

    - name: Debug outputs
      run: |
        echo "Has Addon: ${{ steps.check_labels.outputs.hasAddon }}"
        echo "Has Enhancement: ${{ steps.check_labels.outputs.hasEnhancement }}"

    - name: Assign to project
      if: steps.check_labels.outputs.hasAddon == 'true' || steps.check_labels.outputs.hasEnhancement == 'true'
      uses: actions/github-script@v6
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      with:
        script: |
          const fetch = require('node-fetch');

          async function assignIssueToProject() {
            const projectUrl = 'https://api.github.com/users/PSYCHEER/projects/4';
            const columnName = 'Suggestions';
            const issueUrl = context.payload.issue.html_url;

            console.log(`Assigning issue to project: ${projectUrl}`);
            console.log(`Column name: ${columnName}`);

            const projectId = projectUrl.split('/').pop();

            const columnsResponse = await fetch(`https://api.github.com/projects/${projectId}/columns`, {
              headers: {
                'Authorization': `token ${process.env.GH_PAT}`,
                'Accept': 'application/vnd.github.inertia-preview+json'
              }
            });

            if (!columnsResponse.ok) {
              throw new Error(`Failed to fetch columns: ${columnsResponse.statusText}`);
            }

            const columns = await columnsResponse.json();
            console.log(`Columns fetched: ${JSON.stringify(columns)}`);

            const column = columns.find(col => col.name === columnName);
            if (!column) throw new Error(`Column ${columnName} not found`);

            console.log(`Assigning to column ID: ${column.id}`);

            const cardResponse = await fetch(`https://api.github.com/projects/columns/${column.id}/cards`, {
              method: 'POST',
              headers: {
                'Authorization': `token ${process.env.GH_PAT}`,
                'Accept': 'application/vnd.github.inertia-preview+json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                content_id: context.payload.issue.id,
                content_type: 'Issue'
              })
            });

            if (!cardResponse.ok) {
              throw new Error(`Failed to create card: ${cardResponse.statusText}`);
            }

            console.log('Issue successfully assigned to project');
          }

          assignIssueToProject().catch(error => {
            console.error(`Error assigning issue to project: ${error.message}`);
            throw error;
          });