name: Assign Issues to Project Board

on:
  issues:
    types: [opened, labeled, unlabeled, edited]
  issue_comment:
    types: [created, edited]

jobs:
  assign-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Assign issue to project board
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(label => label.name);
            const projectId = 'PVT_kwHOAo7FNc4AzGK0'; // Replace with your project global ID
            const columnMapping = {
              'bug': 'Issue',
              'addon': 'Suggestions',
              'enhancement': 'Suggestions'
            };

            const status = labels.map(label => columnMapping[label]).find(status => status);

            if (!status) {
              console.log('No matching label found for the issue.');
              return;
            }

            let fields;
            try {
              const response = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                projectId: projectId
              });
              fields = response.node.fields.nodes;
              console.log('Fields:', fields);
            } catch (error) {
              console.log('Error fetching fields:', error);
              return;
            }

            if (!fields || fields.length === 0) {
              console.log('No fields found.');
              return;
            }

            fields.forEach(field => {
              console.log(`Field: ${field.name}`);
            });

            const statusField = fields.find(field => field.name === 'Status');

            if (!statusField) {
              console.log('Status field not found.');
              return;
            }

            let items;
            try {
              const response = await github.graphql(`
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                              url
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, {
                projectId: projectId
              });
              items = response.node.items.nodes;
              console.log('Items:', items);
            } catch (error) {
              console.log('Error fetching items:', error);
              return;
            }

            const item = items.find(item => item.content.url === issue.url);

            if (!item) {
              console.log('Issue not found in the project.');
              return;
            }

            try {
              await github.graphql(`
                mutation($itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: {
                      singleSelectOptionId: $value
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, {
                itemId: item.id,
                fieldId: statusField.id,
                value: status
              });
              console.log(`Moved issue #${issue.number} to ${status} column.`);
            } catch (error) {
              console.log('Error updating item field value:', error);
            }